// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileUploadService_SimpleUpload_FullMethodName = "/fileupload.FileUploadService/SimpleUpload"
	FileUploadService_ChunkUpload_FullMethodName  = "/fileupload.FileUploadService/ChunkUpload"
	FileUploadService_StreamUpload_FullMethodName = "/fileupload.FileUploadService/StreamUpload"
)

// FileUploadServiceClient is the client API for FileUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileUploadServiceClient interface {
	// Simple upload for small files (< 4MB recommended)
	SimpleUpload(ctx context.Context, in *SimpleUploadRequest, opts ...grpc.CallOption) (*SimpleUploadResponse, error)
	// Client streaming for large files
	ChunkUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ChunkUploadRequest, ChunkUploadResponse], error)
	// Bidirectional streaming with progress updates
	StreamUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamUploadRequest, StreamUploadResponse], error)
}

type fileUploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileUploadServiceClient(cc grpc.ClientConnInterface) FileUploadServiceClient {
	return &fileUploadServiceClient{cc}
}

func (c *fileUploadServiceClient) SimpleUpload(ctx context.Context, in *SimpleUploadRequest, opts ...grpc.CallOption) (*SimpleUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleUploadResponse)
	err := c.cc.Invoke(ctx, FileUploadService_SimpleUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileUploadServiceClient) ChunkUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ChunkUploadRequest, ChunkUploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileUploadService_ServiceDesc.Streams[0], FileUploadService_ChunkUpload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChunkUploadRequest, ChunkUploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileUploadService_ChunkUploadClient = grpc.ClientStreamingClient[ChunkUploadRequest, ChunkUploadResponse]

func (c *fileUploadServiceClient) StreamUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamUploadRequest, StreamUploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileUploadService_ServiceDesc.Streams[1], FileUploadService_StreamUpload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamUploadRequest, StreamUploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileUploadService_StreamUploadClient = grpc.BidiStreamingClient[StreamUploadRequest, StreamUploadResponse]

// FileUploadServiceServer is the server API for FileUploadService service.
// All implementations must embed UnimplementedFileUploadServiceServer
// for forward compatibility.
type FileUploadServiceServer interface {
	// Simple upload for small files (< 4MB recommended)
	SimpleUpload(context.Context, *SimpleUploadRequest) (*SimpleUploadResponse, error)
	// Client streaming for large files
	ChunkUpload(grpc.ClientStreamingServer[ChunkUploadRequest, ChunkUploadResponse]) error
	// Bidirectional streaming with progress updates
	StreamUpload(grpc.BidiStreamingServer[StreamUploadRequest, StreamUploadResponse]) error
	mustEmbedUnimplementedFileUploadServiceServer()
}

// UnimplementedFileUploadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileUploadServiceServer struct{}

func (UnimplementedFileUploadServiceServer) SimpleUpload(context.Context, *SimpleUploadRequest) (*SimpleUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleUpload not implemented")
}
func (UnimplementedFileUploadServiceServer) ChunkUpload(grpc.ClientStreamingServer[ChunkUploadRequest, ChunkUploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ChunkUpload not implemented")
}
func (UnimplementedFileUploadServiceServer) StreamUpload(grpc.BidiStreamingServer[StreamUploadRequest, StreamUploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUpload not implemented")
}
func (UnimplementedFileUploadServiceServer) mustEmbedUnimplementedFileUploadServiceServer() {}
func (UnimplementedFileUploadServiceServer) testEmbeddedByValue()                           {}

// UnsafeFileUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileUploadServiceServer will
// result in compilation errors.
type UnsafeFileUploadServiceServer interface {
	mustEmbedUnimplementedFileUploadServiceServer()
}

func RegisterFileUploadServiceServer(s grpc.ServiceRegistrar, srv FileUploadServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileUploadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileUploadService_ServiceDesc, srv)
}

func _FileUploadService_SimpleUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUploadServiceServer).SimpleUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileUploadService_SimpleUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUploadServiceServer).SimpleUpload(ctx, req.(*SimpleUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileUploadService_ChunkUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileUploadServiceServer).ChunkUpload(&grpc.GenericServerStream[ChunkUploadRequest, ChunkUploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileUploadService_ChunkUploadServer = grpc.ClientStreamingServer[ChunkUploadRequest, ChunkUploadResponse]

func _FileUploadService_StreamUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileUploadServiceServer).StreamUpload(&grpc.GenericServerStream[StreamUploadRequest, StreamUploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileUploadService_StreamUploadServer = grpc.BidiStreamingServer[StreamUploadRequest, StreamUploadResponse]

// FileUploadService_ServiceDesc is the grpc.ServiceDesc for FileUploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileUploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileupload.FileUploadService",
	HandlerType: (*FileUploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleUpload",
			Handler:    _FileUploadService_SimpleUpload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChunkUpload",
			Handler:       _FileUploadService_ChunkUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamUpload",
			Handler:       _FileUploadService_StreamUpload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
