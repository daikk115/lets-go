syntax = "proto3";

package fileupload;
option go_package = "test/proto";

// Method 1: Simple upload (for small files)
message SimpleUploadRequest {
  string filename = 1;
  bytes content = 2;
}

message SimpleUploadResponse {
  bool success = 1;
  string message = 2;
  int64 size = 3;
}

// Method 2: Streaming upload (for large files)
message ChunkUploadRequest {
  oneof data {
    FileInfo info = 1;    // First message with file metadata
    bytes chunk = 2;      // Subsequent messages with file chunks
  }
}

message FileInfo {
  string filename = 1;
  int64 total_size = 2;
  string checksum = 3;   // Optional: for integrity verification
}

message ChunkUploadResponse {
  bool success = 1;
  string message = 2;
  int64 uploaded_size = 3;
}

// Method 3: Bidirectional streaming (with progress updates)
message StreamUploadRequest {
  oneof data {
    FileInfo info = 1;
    bytes chunk = 2;
  }
}

message StreamUploadResponse {
  bool success = 1;
  string message = 2;
  int64 uploaded_size = 3;
  float progress_percent = 4;
}

service FileUploadService {
  // Simple upload for small files (< 4MB recommended)
  rpc SimpleUpload(SimpleUploadRequest) returns (SimpleUploadResponse);

  // Client streaming for large files
  rpc ChunkUpload(stream ChunkUploadRequest) returns (ChunkUploadResponse);

  // Bidirectional streaming with progress updates
  rpc StreamUpload(stream StreamUploadRequest) returns (stream StreamUploadResponse);
}